// Code generated by MockGen. DO NOT EDIT.
// Source: tcp-pow/internal/handlers (interfaces: NonceValidator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "tcp-pow/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockNonceValidator is a mock of NonceValidator interface.
type MockNonceValidator struct {
	ctrl     *gomock.Controller
	recorder *MockNonceValidatorMockRecorder
}

// MockNonceValidatorMockRecorder is the mock recorder for MockNonceValidator.
type MockNonceValidatorMockRecorder struct {
	mock *MockNonceValidator
}

// NewMockNonceValidator creates a new mock instance.
func NewMockNonceValidator(ctrl *gomock.Controller) *MockNonceValidator {
	mock := &MockNonceValidator{ctrl: ctrl}
	mock.recorder = &MockNonceValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceValidator) EXPECT() *MockNonceValidatorMockRecorder {
	return m.recorder
}

// IsNonceValid mocks base method.
func (m *MockNonceValidator) IsNonceValid(arg0 models.TCPData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNonceValid", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNonceValid indicates an expected call of IsNonceValid.
func (mr *MockNonceValidatorMockRecorder) IsNonceValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNonceValid", reflect.TypeOf((*MockNonceValidator)(nil).IsNonceValid), arg0)
}
