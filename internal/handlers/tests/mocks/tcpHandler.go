// Code generated by MockGen. DO NOT EDIT.
// Source: tcp-pow/internal/handlers (interfaces: TCPHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "tcp-pow/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTCPHandler is a mock of TCPHandler interface.
type MockTCPHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTCPHandlerMockRecorder
}

// MockTCPHandlerMockRecorder is the mock recorder for MockTCPHandler.
type MockTCPHandlerMockRecorder struct {
	mock *MockTCPHandler
}

// NewMockTCPHandler creates a new mock instance.
func NewMockTCPHandler(ctrl *gomock.Controller) *MockTCPHandler {
	mock := &MockTCPHandler{ctrl: ctrl}
	mock.recorder = &MockTCPHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPHandler) EXPECT() *MockTCPHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockTCPHandler) Handle(arg0 models.TCPData) (models.TCPData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0)
	ret0, _ := ret[0].(models.TCPData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockTCPHandlerMockRecorder) Handle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockTCPHandler)(nil).Handle), arg0)
}
